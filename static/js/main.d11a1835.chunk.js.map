{"version":3,"sources":["components/SearchInput/index.js","App.js","serviceWorker.js","index.js"],"names":["SearchInput","input","useRef","useEffect","focus","react_default","a","createElement","className","type","id","name","aria-label","ref","el","placeholder","maxLength","App","xmlns","viewBox","fill","d","cx","cy","r","strokeWidth","components_SearchInput","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOA0BeA,oBAtBK,WAClB,IAAIC,EAAQC,iBAAO,MAKnB,OAHAC,oBAAU,WACNF,EAAMG,UAGRC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,SACEE,KAAK,SACLC,GAAG,eACHF,UAAU,eACVG,KAAK,IACLC,aAAW,gBACXC,IAAK,SAAAC,GAAE,OAAKb,EAAQa,GACpBC,YAAY,gBACZC,UAAW,QCUJC,MAvBf,WACE,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OACEW,MAAM,6BACNC,QAAQ,YACRX,UAAU,YAEVH,EAAAC,EAAAC,cAAA,QACEC,UAAU,eACVY,KAAK,0BACLC,EAAE,okCAEJhB,EAAAC,EAAAC,cAAA,UAAQe,GAAG,IAAIC,GAAG,KAAKC,EAAE,IAAIC,YAAY,IAAIL,KAAK,YAClDf,EAAAC,EAAAC,cAAA,UAAQe,GAAG,KAAKC,GAAG,KAAKC,EAAE,IAAIC,YAAY,IAAIL,KAAK,aAErDf,EAAAC,EAAAC,cAACmB,EAAD,SCZYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d11a1835.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\n\nimport \"./style.css\";\n\nconst SearchInput = () => {\n  let input = useRef(null);\n\n  useEffect(() => {\n      input.focus()\n  });\n  return (\n    <div className=\"search-input-container\">\n      <input\n        type=\"search\"\n        id=\"search-input\"\n        className=\"search-input\"\n        name=\"q\"\n        aria-label=\"Search flickr\"\n        ref={el => (input = el)}\n        placeholder=\"Search flickr\"\n        maxLength={50}\n      />\n    </div>\n  );\n};\n\nexport default SearchInput;\n","// @flow\n\nimport React from \"react\";\nimport \"./App.css\";\n\nimport SearchInput from './components/SearchInput'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 32 32\"\n          className=\"App-logo\"\n        >\n          <path\n            className=\"animate-fill\"\n            fill=\"hsla(220, 13%, 5%, 0.9)\"\n            d=\"M11 5C9.032 5 7.46 6.44 7.125 8.313c-1.89.476-3.53 1.705-4.25 3.656h-.03L.718 17.936C.265 18.863 0 19.904 0 21c0 3.854 3.146 7 7 7 3.472 0 6.365-2.552 6.906-5.875.543.535 1.28.875 2.094.875.814 0 1.55-.34 2.094-.875C18.634 25.448 21.528 28 25 28c3.854 0 7-3.146 7-7 0-.974-.2-1.906-.563-2.75l-2.28-6.375-.032-.03v-.033c-.73-1.77-2.348-3.012-4.25-3.5C24.54 6.442 22.968 5 21 5c-1.857 0-3.362 1.285-3.813 3h-2.375c-.45-1.715-1.955-3-3.812-3zm0 2c1.19 0 2 .81 2 2v1h6V9c0-1.19.81-2 2-2s2 .81 2 2v.906l.906.094c1.486.156 2.766 1.192 3.344 2.53.01.022.022.042.03.064l.75 2.125c-.918-.446-1.944-.72-3.03-.72-2.924 0-5.425 1.817-6.47 4.375C17.996 17.545 17.054 17 16 17c-1.053 0-1.995.544-2.53 1.375C12.424 15.817 9.923 14 7 14c-1.072 0-2.09.253-3 .688l.75-2.032v-.03c.58-1.55 1.808-2.464 3.344-2.626L9 9.906V9c0-1.19.81-2 2-2zm-4 9c2.773 0 5 2.227 5 5s-2.227 5-5 5-5-2.227-5-5c0-.708.175-1.36.438-1.97.016-.037.013-.086.03-.124C3.26 17.192 4.98 16 7 16zm18 0c2.773 0 5 2.227 5 5s-2.227 5-5 5-5-2.227-5-5 2.227-5 5-5zm-9 3c.564 0 1 .436 1 1 0 .564-.436 1-1 1-.564 0-1-.436-1-1 0-.564.436-1 1-1z\"\n          />\n          <circle cx=\"7\" cy=\"21\" r=\"3\" strokeWidth=\"0\" fill=\"#0063DC\" />\n          <circle cx=\"25\" cy=\"21\" r=\"3\" strokeWidth=\"0\" fill=\"#FF0084\" />\n        </svg>\n        <SearchInput />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}